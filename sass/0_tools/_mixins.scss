// Mixins

// Fluid Typography
// @link https://css-tricks.com/snippets/css/fluid-typography/
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

// Clearfix
@mixin clearfix() {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// Make list flush to the left side
@mixin list-flush() {
  margin: 0;
  padding: 0;
}

// Reset lists so that they have no styling
@mixin reset-list() {
  @include list-flush();
  list-style: none;

  li {
    list-style: none;
  }
}

// Hide text for image replacement
@mixin hide-text($important: null) {
  $bang: if($important, !important, null);
  text-indent: 110% $bang;
  white-space: nowrap $bang;
  overflow: hidden $bang;
}

/// Hide Visually
@mixin hide-visually($important: null) {
  $bang: if($important, !important, null);
  border: 0 $bang;
  clip: rect(1px, 1px, 1px, 1px) $bang;
  height: 1px $bang;
  overflow: hidden $bang;
  padding: 0 $bang;
  position: absolute $bang;
  width: 1px $bang;
}

/// Show Visually
@mixin show-visually($important: null) {
  $bang: if($important, !important, null);
  clip: auto $bang;
  height: auto $bang;
  position: inherit $bang;
  width: auto $bang;
}

// Responsive sprite
//
// The sprite image should be horizontal and each image in the sprite should be equally spaced.
// @param {string} $sprite-url - URL path to the background sprite image
// @param {list} $images - Array of all the individual icon/image names
// @param {string} $width [100%] - How wide a single icon/image from the sprite will be
// @param {string} $padding-bottom [100%] - Total height the icon/image will be
@mixin responsive-sprite($sprite-url, $images: (), $width: 100%, $padding-bottom: 100%) {
  display: block;
  padding-bottom: $padding-bottom;
  height: 0;
  width: $width;
  background-image: url($sprite-url);
  background-repeat: no-repeat;
  background-size: 100% * length($images);
  background-position: 0 0;

  $ratio: 100% / (length($images) - 1);

  @for $i from 1 through length($images) {
    $image: nth($images, $i);

    &--#{$image} {
      background-position: ($ratio * ($i - 1)) 0;
    }
  }
}

// Standard Sprite generator
//
// The sprite image should be horizontal and each image in the sprite should be equally spaced.
// @param {string} $sprite-url - URL path to the background sprite image
// @param {list} $images - Array of all the individual icon/image names
// @param {string} $width [50px] - How wide a single icon/image from the sprite will be
// @param {string} $height [50px] - Total height the icon/image will be
@mixin horizontal-sprite($sprite-url, $images: (), $width: 50px, $height: 50px) {
  display: block;
  height: $height;
  width: $width;
  background-image: url($sprite-url);
  background-repeat: no-repeat;
  background-position: 0 0;

  @for $i from 1 through length($images) {
    $image: nth($images, $i);

    &--#{$image} {
      background-position: -($width * ($i - 1)) 0;
    }
  }
}
